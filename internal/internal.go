// Code generated by go-bindata.
// sources:
// internal/commit-msg
// DO NOT EDIT!

package internal

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _internalCommitMsg = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x57\x6d\x57\xdb\x38\xd3\xfe\x6c\xff\x8a\xa9\x93\xa7\x49\xb6\x71\x0c\x9c\xfd\xb2\x74\xb3\x7b\xb2\x10\x20\xa7\x2d\xf4\x90\xf4\xe1\xec\x5d\x0a\x28\xf6\x38\xd6\xe2\x48\xae\x24\x27\x64\x1b\xfe\xfb\x7d\x46\x72\x5e\xa1\xf7\x17\x82\xa5\x79\xbd\x66\x74\x69\x54\x7b\x13\x8d\xb9\x88\x74\xe6\xd7\xe0\x4c\xc9\x29\x9c\xa3\x52\xdc\xc0\x89\x4c\x10\xae\x71\xc6\x71\x0e\x47\x9d\xc3\x5f\x3b\x47\x7e\xcd\xaf\xc1\x67\xa6\x0c\xc8\xf4\x35\xa9\x66\x66\x4c\xa1\x8f\xa3\x68\x3e\x9f\x77\x26\x76\x3f\x96\x09\x2a\xbb\xdb\x89\xe5\x34\x6a\x59\x13\x27\xb2\x58\x28\x3e\xc9\x0c\x34\x4f\x5a\x70\x74\x70\xf0\x1b\x8c\x32\x84\x9e\x48\x94\xe4\x09\x5c\x15\x28\x60\x28\x4b\x15\x23\x7c\x56\xf2\x1f\x8c\x8d\x55\xfb\xc8\x63\x14\x1a\x13\x28\x45\x82\x0a\x0c\xa9\x14\x2c\xce\x70\xb5\xd3\x86\xff\x47\xa5\xb9\x14\x70\xd4\x39\x80\x26\x09\x04\xd5\x56\xd0\x7a\xef\xd7\x60\x21\x4b\x98\xb2\x05\x08\x69\xa0\xd4\x08\x26\xe3\x1a\x52\x9e\x23\xe0\x53\x8c\x85\x01\x2e\x20\x96\xd3\x22\xe7\x4c\xc4\x08\x73\x6e\x32\xeb\xa6\x32\xd2\xf1\x6b\xf0\x77\x65\x42\x8e\x0d\xe3\x02\x18\xc4\xb2\x58\x10\x1e\x5b\x72\xc0\x5c\xc0\x04\x47\x85\x06\xb3\x81\x76\xa4\x9a\x44\xb9\x13\xd2\xd1\xc7\xc1\x49\xff\x72\xd8\x0f\x8f\x3a\x07\x56\xfc\x8b\xc8\x51\x6b\x50\xf8\xbd\xe4\x0a\x13\x18\x2f\x80\x15\x45\xce\x63\x36\xce\x11\x72\x36\x07\xa9\x80\x4d\x14\x62\x02\x46\x52\xac\x73\xc5\x0d\x17\x93\x36\x68\x99\x9a\x39\x53\xe8\xd7\x20\xe1\xda\x28\x3e\x2e\xcd\x0e\x50\xab\xc8\xb8\xde\x11\x90\x02\x98\x80\xa0\x37\x84\xc1\x30\x80\xbf\x7a\xc3\xc1\xb0\xed\xd7\xe0\x66\x30\xba\xb8\xfa\x32\x82\x9b\xde\xf5\x75\xef\x72\x34\xe8\x0f\xe1\xea\x1a\x4e\xae\x2e\x4f\x07\xa3\xc1\xd5\xe5\x10\xae\xce\xa0\x77\xf9\x37\x7c\x18\x5c\x9e\xb6\x01\xb9\xc9\x50\x01\x3e\x15\x8a\xe2\x97\x0a\x38\x41\x88\x09\xe1\x35\x44\xdc\x09\x20\x95\x2e\x20\x5d\x60\xcc\x53\x1e\x43\xce\xc4\xa4\x64\x13\x84\x89\x9c\xa1\x12\x5c\x4c\xa0\x40\x35\xe5\x9a\x0a\xa9\x81\x89\xc4\xaf\x41\xce\xa7\xdc\x30\x63\x57\x5e\x24\xd5\xf1\x6b\xbe\x5f\x0a\x8d\x06\xce\xaf\xfb\x9f\xef\xaf\x3e\xdb\x20\x7d\xff\xe4\xa2\x77\x79\xde\xbf\x1f\x9c\xde\xf7\xce\x46\xfd\xeb\x6e\xf0\x57\x39\x59\x9e\x62\x81\x22\xd1\xe1\x95\x58\x0e\xb4\x2e\x71\x39\x42\x6d\x96\x67\xc8\x4c\xa9\x70\x79\xc6\x9f\x50\xdb\xbf\x49\xe0\x7f\x1a\x9e\x77\x83\xfa\x61\xe0\x53\xcf\x66\x18\x3f\x52\xf4\x6d\x0a\x09\x58\x92\x00\x4f\xc1\x86\x49\x05\x60\x50\x0a\xfe\xbd\x44\x38\xc9\x98\x98\x60\x38\x48\xfc\x9a\xcf\x92\xe4\xde\x7d\x0f\x92\x66\x0b\x7e\xf8\x5e\x9c\x23\x13\xf7\x53\xd4\x9a\x4d\xb0\xfb\x40\xcd\x1c\x22\x34\x7c\xcf\x8b\xee\x12\x9e\xa6\x10\x86\x13\x6e\xa0\xf3\x4b\xf4\xc3\xf7\x3c\x4f\x47\x51\x44\xbf\xdf\x7d\xcf\x7b\xb6\x42\x43\x3e\x11\x98\x84\x32\x4d\xc3\xf1\xe2\x38\x4a\xec\x62\x8d\x7e\x1b\x10\xd4\x3f\x0d\xcf\x03\x58\x02\x99\xa0\x1a\x17\xba\x60\x31\x3e\xf8\x1e\x4f\xc1\xa0\x36\x10\xfe\x0b\x41\x7d\x27\x86\xc0\xf7\x4c\x86\xc2\xf7\x3c\x85\xa6\x54\xc2\xf7\x52\xee\xfb\x5e\x0d\x4e\xa5\x3d\x25\x94\xe7\x3a\x25\xea\x3a\x83\xd3\x82\xce\xc8\x94\x1b\x6d\x0d\x63\x9c\xc9\x17\x56\x61\x09\x19\xb2\x04\xc2\x43\x0a\x47\x61\x01\xe1\x77\x68\xdc\xdd\x36\x53\xfe\x54\x16\xb7\x4b\xfd\xbd\x64\x3a\xbb\x6d\xbd\x69\xbc\xee\x7f\x15\x70\x90\xb2\x5c\x63\x00\x5d\x08\x1e\x28\xab\x58\x8a\x94\x4f\x20\x0c\xc7\x52\xe6\x04\x16\x1a\x70\x44\xd3\x89\x15\x32\x83\x2b\xb8\x1f\xfe\x47\x62\xa8\x37\x29\x1d\x03\xcb\x15\xb2\x64\x01\xf8\xc4\xb5\xf9\x93\x8a\xaa\x65\x9b\xbe\x0c\x34\x85\x84\xd8\x4a\xb6\x3a\x36\x26\x97\x09\x87\xc6\xdd\xc6\xc0\x1a\xf7\x3f\xa2\x04\x67\x91\x28\xf3\xfc\x27\x39\x25\xdd\x87\xfb\x09\x8a\x75\x4b\x3c\xf8\xde\xa8\x6b\x95\x3b\x66\x5a\x74\xea\xf5\xc0\xf7\x7a\x37\x1f\xba\x6c\xfe\x68\xbd\x7d\x85\xf0\x09\xa2\x52\xab\xe8\xa9\x98\xfc\x6a\x49\x9a\xcd\x1f\xe1\xdb\x7b\xa8\xcc\xd7\x60\x28\x73\xa6\xb8\x86\xde\xcd\x07\x3a\xda\xff\x94\xda\x80\x91\x12\xc6\x4a\x3e\x5a\x11\xb2\xf7\xc2\xc4\x1a\x8b\x73\x24\x48\x15\x12\x37\x4f\x51\x98\x93\x8c\x29\x48\xe9\x0e\xd8\x02\x5b\x2a\xcb\x95\x09\xa6\xac\xcc\x0d\xe8\xc5\x74\x2c\x73\xdf\xdb\x52\xe9\xee\xd6\x66\xf2\x8a\xd5\x87\x5d\x85\xfa\x8f\xad\xaf\xe3\xb0\xf6\x6c\xc3\xb9\x90\x73\x47\xc9\x73\xa9\x1e\xf5\x31\x2d\x85\x50\x30\xa5\x1d\x85\xb8\xae\x83\xaa\xc7\x80\x69\x68\x1a\x7c\x32\x1f\xb9\xc0\x77\x30\xce\x99\x78\xa4\x7f\x7f\x69\xfd\xe2\x14\x99\xd6\xe5\x14\x61\x23\x62\x24\x8c\x11\x18\xa4\x52\x1a\x54\x50\x0a\xc3\x73\x28\x94\x9c\xa1\x00\x49\x14\x36\xe7\x1a\x9d\xae\xbb\x0e\xb8\x14\xc7\xd6\x73\xca\x95\x36\x30\xce\x65\xfc\x48\x30\xd3\xc1\xa8\x8c\x34\x99\x06\x6e\x68\x91\xe4\x0c\x37\x39\xb6\x9c\x09\xea\xaa\x2d\xe7\x5c\x18\x09\x0c\x66\x4c\x71\xa2\x73\x27\x43\x75\x84\x58\x96\xc2\x6c\xe2\xd7\x6e\x4b\xd2\x05\x44\x36\x05\x3e\x99\xb5\x1d\xba\x10\x90\x29\xdd\x86\x42\x71\x61\xe0\xb5\xfc\x09\x18\x93\xa1\x4b\x05\x80\x29\x14\x8d\x55\xbc\xce\x36\x17\xd0\x27\xe2\x26\xf3\x39\xd3\xbb\x66\xaa\x1c\xd9\x8c\xf1\xdc\x5e\x3c\xc4\xd8\x55\xb6\x54\x0b\x2e\x26\xbe\x57\xa7\x86\x6b\xf8\xde\x5f\xfd\xf3\xc1\x25\x11\x9b\x57\x83\x79\x46\x17\xe9\x1c\x41\x1b\x1a\x11\xd6\x97\xa7\xad\x83\x05\x13\x4c\xc6\xb6\x9c\x59\x2d\x72\x55\x99\x6f\xff\x04\xeb\x8e\xef\x79\x5c\x9f\xb9\x10\xba\x70\xe0\x7b\x9e\x53\x38\x71\x3d\x54\xad\x6d\x10\x74\x0b\xae\xa7\x86\x8f\xbc\x80\xdc\xae\xda\xb8\xe8\x7e\xb1\xa1\x6d\xb7\x3c\x2d\xc8\xd2\x00\x13\x0b\xb0\x9c\xa9\x61\x8c\xa9\x54\x08\x9c\xbc\x47\x77\x8d\xa0\xbe\x25\x1f\x34\x22\xf8\xe1\x0a\xb3\xe5\xc4\xa2\x49\x35\xda\xf5\x43\xcb\x96\xda\xc9\x80\xbd\x3a\x44\x02\x38\x43\xb5\x30\x19\x09\xb1\x94\xd2\xe2\xa6\x4d\x86\xca\xc2\x72\x6c\x86\x80\x22\x59\x4d\x15\x34\xa0\xb4\x1d\x8c\xa4\xe0\xda\x4d\x8a\x7c\x01\x05\x33\x71\x06\x09\x33\xac\x43\xda\x83\x14\xa6\x14\xb4\xc9\x98\x00\x29\xaa\x70\xaa\x4c\xd6\x71\xcc\x99\x06\x9c\x16\x66\xd1\x76\x97\x04\xb0\x3c\x87\x71\x69\x48\xc3\x26\xbb\x75\x11\x45\xb6\xb6\xfb\xc8\x7a\xae\xd4\xcd\x09\x1a\xf2\xd0\x82\x1f\x40\xb7\x13\x01\xb2\x82\xfd\x64\xd3\xd4\x15\xfa\xb2\x34\x9a\x27\xb8\x6a\xa5\x0a\x4e\x4d\x0e\xeb\x11\xbc\x7d\x0b\xcd\xbd\xa2\x76\xe1\xa0\xb5\xe7\xfe\xdd\xbb\x7d\x37\x16\x80\x5d\x93\x64\xf1\xf6\xeb\x57\x16\xfe\xdb\x0b\xff\x73\x10\xfe\x16\x7e\x7b\x77\xec\x1c\x6c\x9a\xa8\x0b\x87\xce\xf6\x7e\x23\x1d\x3a\xcb\xd1\xb7\x9f\xc5\xf4\x13\xbd\xa3\x55\x44\x37\x08\x19\x9b\x11\xcd\x08\x29\xc2\x0d\x00\x55\x9d\xb7\x10\xe9\xc0\x05\x13\x49\xee\xa6\xd0\x8e\xef\x35\xb7\x60\xfe\x63\x95\xbb\x3b\xe6\xb9\xe3\x05\x8f\x8e\x62\x93\x53\x11\xde\x03\x87\xdf\xb7\x48\xe3\x3d\xf0\x77\xef\x9c\x4a\xa5\x13\x04\x76\x68\xf0\x3d\x2f\xaf\x2a\x67\x57\x5e\xd4\x72\xeb\x64\x1d\xbe\x7e\xb2\x5c\x62\xa7\x68\x30\x36\xd5\x11\x26\x36\x2e\x95\x42\xb1\xc7\x8a\xb6\x5d\x2b\xa6\x79\xb5\x9e\x84\xe9\x1b\xaa\xcf\x9f\xfb\x05\x5a\x2e\x21\xba\xdb\x5d\xbc\x8d\x6e\xa3\xc8\x25\xb5\x7b\xfe\x29\x22\x47\x3a\x37\x44\x90\x34\x0f\xd3\xb5\xc1\x45\x2a\xd5\xd4\x8e\x89\xc0\xc6\x74\xa0\xb7\x03\xb5\x4c\x57\xf5\x88\x45\x94\xcc\xa6\xaf\x94\xf8\xa8\xc2\xf1\x35\x92\x79\xae\x94\x1c\xa6\x6f\x08\xd4\x4a\x7a\x85\xb2\xfb\x0d\x6e\x45\xf0\xbe\x92\xdf\xdd\xa9\xaf\x11\xad\x32\xca\xa8\x0b\xb8\x98\x1c\x57\x47\x78\xcd\xca\x6b\x64\x63\x29\xe8\xe8\xd0\x9b\x60\xc3\x95\x9a\x5e\x06\x48\x5c\x4e\x0a\x9b\x19\xcd\x95\x87\x6c\xb9\x27\x56\x91\xb3\x18\x2d\x3d\x7c\x94\xf2\x71\x3d\x7f\x6f\x6d\xba\xc7\x04\x3d\xb3\xb6\xcc\x8c\x17\x6b\xb7\x96\xf1\x6b\xb0\x37\x4d\x77\xe0\x03\x2e\x34\xe4\x5c\xd3\x43\x82\x0b\xe2\xa5\x66\xcc\xe8\x8d\x21\x34\x0a\xcd\x0d\x9f\x61\x8b\x00\xaf\x38\xdd\x12\x9c\xbd\xf1\xd6\x5e\xda\xee\x7b\x8b\x0d\x31\xd7\x08\x4d\x9c\x74\x60\x77\xd2\xa5\x01\xac\x46\x06\xae\x56\x17\xb5\x1b\x76\xaa\x6b\x70\x07\x32\x9a\xc6\x05\xce\xab\x63\x27\x92\x7d\x80\x34\x30\xb2\xe4\xe0\x95\x29\x70\xa3\x41\xce\x45\xc7\xf7\xfa\x97\xa7\xb6\x98\xa5\xb0\x76\x31\xa9\x0e\x05\x55\x7c\x9b\x3c\x0e\x76\x4e\xda\xa6\xe2\xdb\x7d\x50\x9d\x3f\xcf\x8b\xab\x71\xaf\x97\xba\xfe\x0d\xee\x9a\x01\x18\x99\xcb\x39\xaa\x66\xd0\x08\xea\x7b\xc0\x06\x8d\xa0\x05\x41\xeb\x98\xf4\x45\x39\x5d\xd9\xa3\x7a\x1b\xd7\x77\xed\x75\x13\x90\xd3\xd6\x8a\x18\x6c\xbe\x5d\x38\x7c\xef\x32\xff\xbd\x0b\x2b\x75\xb7\xb2\x26\x08\x4a\x67\x93\xe2\xdb\xb7\x30\x25\x1a\x6d\xae\x62\x72\xc6\xbf\x92\xca\xb7\x56\x1b\x76\xe2\x6f\x51\xcf\x57\x1c\xb8\x8b\xd3\x81\x5d\xa9\xb8\x67\x6b\xbe\x1e\x34\x82\x3a\x4f\x82\x86\x05\xe7\x79\x83\xda\xb6\x97\xad\x83\xb5\x36\xb9\x4b\x66\x3f\x31\xf8\xec\x7b\xcf\x9b\x01\x1c\x82\xfa\x28\xb0\xf9\xcc\xdc\xbf\xab\x17\xd1\x12\xd4\x14\xc2\xd4\x2e\xfa\xcf\xfe\xce\x14\x3e\x10\x45\x69\xdc\xeb\xcc\x3d\x65\x8c\x42\x04\x3b\xd1\xd2\xf3\x1a\x43\xfa\xa6\xe7\x04\x4f\x69\xfe\x41\x61\xdc\xb8\xab\x70\x16\xba\xd9\x34\xb8\xe8\xf7\x4e\xef\x0e\x02\x38\xda\x3c\x01\x1e\xd6\x6f\x00\x67\xd4\x69\x42\xdd\xfd\x06\x76\x02\xaf\xb6\x58\x69\x32\xa9\x9c\xc7\x19\x53\x70\x3e\x18\xdd\xf7\xbe\x8c\x2e\xae\xae\xef\x07\xa7\xfd\xcb\x11\xf9\x76\x92\x6e\x00\xa6\x2e\xda\x11\x3e\xb9\xfa\xf4\x69\x30\x1a\xf5\xf7\xe4\x7d\x87\x5d\x0a\x8d\xff\xd3\x8d\x97\xef\xbe\x3d\x18\x1c\x02\x2f\x91\x81\xa5\xef\x91\xb3\x8c\xe9\x2c\x94\x63\xcb\x12\xa1\x59\xcd\xe2\x61\xa8\x4d\xc2\x85\xff\xec\xfb\x3b\xaf\x5d\xff\xbf\x01\x00\x00\xff\xff\x60\xa6\x38\xd6\x55\x12\x00\x00")

func internalCommitMsgBytes() ([]byte, error) {
	return bindataRead(
		_internalCommitMsg,
		"internal/commit-msg",
	)
}

func internalCommitMsg() (*asset, error) {
	bytes, err := internalCommitMsgBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "internal/commit-msg", size: 4693, mode: os.FileMode(493), modTime: time.Unix(1503333175, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"internal/commit-msg": internalCommitMsg,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"internal": {nil, map[string]*bintree{
		"commit-msg": {internalCommitMsg, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
